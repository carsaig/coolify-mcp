name: Sync & Build coolify-mcp with flexible audit

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Optional semver override (v1.2.3)'
        required: false
        type: string
      skip_audit:
        description: 'Skip security audit (use for known acceptable vulnerabilities)'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 */6 * * *'  # Fixed: Proper cron syntax (every 6 hours)

permissions:
  contents: write
  packages: write

jobs:
  audit:
    runs-on: ubuntu-latest
    # Allow this job to fail without blocking the build
    continue-on-error: true
    outputs:
      audit_passed: ${{ steps.audit_check.outputs.passed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to v4
        with: 
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4  # Updated to v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Skip audit if requested
        if: github.event.inputs.skip_audit == 'true'
        run: |
          echo "Security audit skipped by user request"
          echo "passed=true" >> $GITHUB_OUTPUT
        id: audit_check

      - name: Run security audit
        if: github.event.inputs.skip_audit != 'true'
        id: audit_check
        run: |
          # First try npm audit fix for auto-fixable issues
          npm audit fix --audit-level=moderate || true
          
          # Run audit-ci with more flexible configuration
          if npx audit-ci --config ./audit-ci.jsonc; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "Security audit found issues. Check the logs above."
            # Don't exit with error code to allow build to continue
          fi
        env:
          CI: true

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-results
          path: |
            package-lock.json
            npm-audit.log
          retention-days: 7

  sync_and_build:
    needs: audit
    runs-on: ubuntu-latest
    # Continue even if audit failed (but warn)
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      - name: Warn about audit results
        if: needs.audit.outputs.audit_passed == 'false'
        run: |
          echo "⚠️ Security audit found vulnerabilities. Please review and address them."
          echo "Build continues but consider fixing these issues."

      - name: Add upstream & fetch tags
        run: |
          git remote add upstream https://github.com/StuMason/coolify-mcp.git
          git fetch upstream --tags

      - name: Select version
        id: desired
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "using_override=true" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "using_override=false" >> $GITHUB_OUTPUT
            latest_tag=$(git ls-remote --tags upstream \
              | grep -E 'refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$' \
              | sort -V | tail -n1 | sed 's#.*/##')
            echo "tag=${latest_tag}" >> $GITHUB_OUTPUT
          fi
          
          # Check if tag is empty and exit gracefully
          if [ -z "${{ steps.desired.outputs.tag }}" ]; then
            echo "No semver tag found—exiting gracefully."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate semver
        if: steps.desired.outputs.skip_build == 'false'
        id: semver
        uses: matt-usurp/validate-semver@v2
        with: 
          version: ${{ steps.desired.outputs.tag }}

      - name: Skip prerelease
        if: steps.desired.outputs.skip_build == 'false' && steps.semver.outputs.prerelease != ''
        run: |
          echo "Skipping prerelease ${{ steps.semver.outputs.full }}"
          echo "skip_build=true" >> $GITHUB_OUTPUT

      - name: Validate override tag exists
        if: steps.desired.outputs.using_override == 'true' && steps.desired.outputs.skip_build == 'false'
        run: |
          if ! git show-ref --tags | grep -q "${{ steps.desired.outputs.tag }}"; then
            echo "❌ Override tag ${{ steps.desired.outputs.tag }} not found"
            exit 1
          fi

      - name: Compare HEAD vs tag
        if: steps.desired.outputs.skip_build == 'false'
        id: check
        run: |
          target_commit=$(git rev-list -n1 "${{ steps.desired.outputs.tag }}")
          current_commit=$(git rev-parse HEAD)
          
          if [ "$current_commit" = "$target_commit" ]; then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
            echo "Repository is already up to date with tag ${{ steps.desired.outputs.tag }}"
          else
            echo "up_to_date=false" >> $GITHUB_OUTPUT
            echo "Repository needs sync with tag ${{ steps.desired.outputs.tag }}"
          fi

      - name: Sync fork & tag if needed
        if: steps.desired.outputs.skip_build == 'false' && steps.check.outputs.up_to_date == 'false'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          git checkout main
          git reset --hard "${{ steps.desired.outputs.tag }}"
          git push origin main --force
          
          # Only create tag if it doesn't exist locally
          if ! git tag -l | grep -q "^${{ steps.desired.outputs.tag }}$"; then
            git tag "${{ steps.desired.outputs.tag }}"
            git push origin "${{ steps.desired.outputs.tag }}"
          fi

      - name: Set up Docker Buildx
        if: steps.desired.outputs.skip_build == 'false' && steps.check.outputs.up_to_date == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: steps.desired.outputs.skip_build == 'false' && steps.check.outputs.up_to_date == 'false'
        uses: docker/login-action@v3  # Updated to v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image
        if: steps.desired.outputs.skip_build == 'false' && steps.check.outputs.up_to_date == 'false'
        uses: docker/build-push-action@v5  # Updated to v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64  # Multi-platform support
          tags: |
            ghcr.io/${{ github.repository_owner }}/coolify-mcp:${{ steps.semver.outputs.full }}
            ghcr.io/${{ github.repository_owner }}/coolify-mcp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.desired.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Up to date**: ${{ steps.check.outputs.up_to_date }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Audit passed**: ${{ needs.audit.outputs.audit_passed }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.desired.outputs.skip_build }}" == "false" ] && [ "${{ steps.check.outputs.up_to_date }}" == "false" ]; then
            echo "- **Image built**: ✅ Yes" >> $GITHUB_STEP_SUMMARY
            echo "- **Registry**: ghcr.io/${{ github.repository_owner }}/coolify-mcp" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Image built**: ❌ No (no changes or build skipped)" >> $GITHUB_STEP_SUMMARY
          fi

  cleanup:
    needs: sync_and_build
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Clean up old container images
        uses: actions/github-script@v7  # Updated to v7
        with:
          script: |
            const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
              package_type: 'container',
              package_name: 'coolify-mcp',
              username: context.repo.owner
            });
            
            const versions = response.data
              .filter(version => !version.metadata.container.tags.includes('latest'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(5); // Keep latest 5, delete the rest
            
            for (const version of versions) {
              await github.rest.packages.deletePackageVersionForUser({
                package_type: 'container',
                package_name: 'coolify-mcp',
                username: context.repo.owner,
                package_version_id: version.id
              });
              console.log(`Deleted version ${version.id}`);
            }
