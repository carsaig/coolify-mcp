name: Sync & Build coolify‑mcp with strict audit

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Optional semver override (v1.2.3)'
        required: false
        type: string
  schedule:
    - cron: '0 */6 * * *'

permissions:
  contents: write
  packages: write

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      - name: Install dependencies
        run: npm ci

      - name: Run audit-ci (critical only)
        run: npx audit-ci@^7 --config ./audit-ci.jsonc
        env: { CI: true }

  sync_and_build:
    needs: audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      - name: Add upstream & fetch tags
        run: |
          git remote add upstream https://github.com/StuMason/coolify-mcp.git
          git fetch upstream --tags

      - name: Select version
        id: desired
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "using_override=true" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "using_override=false" >> $GITHUB_OUTPUT
            echo "tag=$(git ls-remote --tags upstream \
              | grep -E 'refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$' \
              | sort -V | tail -n1 | sed 's#.*/##')" >> $GITHUB_OUTPUT
          fi
          if [ -z "${{ steps.desired.outputs.tag }}" ]; then
            echo "No semver tag found—exiting."; exit 0
          fi

      - name: Validate semver
        id: semver
        uses: matt-usurp/validate-semver@v2
        with: { version: ${{ steps.desired.outputs.tag }} }

      - name: Skip prerelease
        if: steps.semver.outputs.prerelease != ''
        run: |
          echo "Skipping prerelease ${{ steps.semver.outputs.full }}"; exit 0

      - name: Validate override tag exists
        if: steps.desired.outputs.using_override == 'true'
        run: |
          git show-ref --tags | grep -q "${{ steps.desired.outputs.tag }}" \
            || { echo "Tag not found"; exit 1; }

      - name: Compare HEAD vs tag
        id: check
        run: |
          tgt=$(git rev-list -n1 "${{ steps.desired.outputs.tag }}")
          cur=$(git rev-parse HEAD)
          echo "up_to_date=$([ \"$cur\" = \"$tgt\" ] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Sync fork & tag if needed
        if: steps.check.outputs.up_to_date == 'false'
        run: |
          git checkout main
          git reset --hard "${{ steps.desired.outputs.tag }}"
          git push origin main --force
          git tag "${{ steps.desired.outputs.tag }}"
          git push origin "${{ steps.desired.outputs.tag }}"

      - name: Login to GHCR
        if: steps.check.outputs.up_to_date == 'false'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        if: steps.check.outputs.up_to_date == 'false'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/coolify-mcp:${{ steps.semver.outputs.full }}
            ghcr.io/${{ github.repository_owner }}/coolify-mcp:latest

  cleanup:
    needs: sync_and_build
    if: ${{ github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    steps:
      - uses: quartx-analytics/ghcr-cleaner@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          owner-type: user
          repository-owner: ${{ github.repository_owner }}
          repository-name: ${{ github.repository }}
          package-name: coolify-mcp
          delete-untagged: true
          keep-at-most: 5
          filter-tags: 'v*'
          skip-tags: 'latest'
