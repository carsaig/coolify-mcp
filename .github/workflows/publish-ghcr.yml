name: Sync & Build coolify-mcp (Audit Patched)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Optional semver override (v1.2.3)'
        required: false
        type: string
  schedule:
    - cron: '0 */6 * * *'

permissions:
  contents: write
  packages: write

jobs:
  sync_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      - name: Add upstream & fetch tags
        run: |
          git remote add upstream https://github.com/StuMason/coolify-mcp.git
          git fetch upstream --tags

      - name: Select version
        id: desired
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "using_override=true" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "using_override=false" >> $GITHUB_OUTPUT
            latest_tag=$(git ls-remote --tags upstream \
              | grep -E 'refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$' \
              | sort -V | tail -n1 | sed 's#.*/##')
            echo "tag=${latest_tag}" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "${{ steps.desired.outputs.tag }}" ]; then
            echo "No semver tag found—exiting gracefully."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate semver
        if: steps.desired.outputs.skip_build == 'false'
        id: semver
        uses: matt-usurp/validate-semver@v2
        with: 
          version: ${{ steps.desired.outputs.tag }}

      - name: Skip prerelease
        if: steps.desired.outputs.skip_build == 'false' && steps.semver.outputs.prerelease != ''
        run: |
          echo "Skipping prerelease ${{ steps.semver.outputs.full }}"
          echo "skip_build=true" >> $GITHUB_OUTPUT

      - name: Validate override tag exists
        if: steps.desired.outputs.using_override == 'true' && steps.desired.outputs.skip_build == 'false'
        run: |
          if ! git show-ref --tags | grep -q "${{ steps.desired.outputs.tag }}"; then
            echo "❌ Override tag ${{ steps.desired.outputs.tag }} not found"
            exit 1
          fi

      - name: Compare HEAD vs tag
        if: steps.desired.outputs.skip_build == 'false'
        id: check
        run: |
          target_commit=$(git rev-list -n1 "${{ steps.desired.outputs.tag }}")
          current_commit=$(git rev-parse HEAD)
          
          if [ "$current_commit" = "$target_commit" ]; then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
          else
            echo "up_to_date=false" >> $GITHUB_OUTPUT
          fi

      - name: Sync fork & patch audit issues
        if: steps.desired.outputs.skip_build == 'false' && steps.check.outputs.up_to_date == 'false'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # Sync with upstream
          git checkout main
          git reset --hard "${{ steps.desired.outputs.tag }}"
          
          echo "🔧 PATCHING: Removing npm audit from build process..."
          
          # Patch package.json - remove audit from scripts
          if [ -f "package.json" ]; then
            echo "📦 Patching package.json scripts..."
            # Remove audit from test script
            sed -i 's/npm audit &&//g' package.json
            sed -i 's/&& npm audit//g' package.json
            # Remove standalone audit script if it exists
            sed -i '/"audit":/d' package.json
          fi
          
          # Patch Dockerfile - replace audit commands
          if [ -f "Dockerfile" ]; then
            echo "🐳 Patching Dockerfile..."
            # Replace npm audit with npm install --audit=false
            sed -i 's/npm audit/echo "Audit skipped"/g' Dockerfile
            sed -i 's/npm ci$/npm ci --audit=false/g' Dockerfile
            sed -i 's/npm install$/npm install --audit=false/g' Dockerfile
          fi
          
          # Create custom Dockerfile if none exists
          if [ ! -f "Dockerfile" ]; then
            echo "🐳 Creating audit-free Dockerfile..."
            cat > Dockerfile << 'EOF'
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --audit=false --fund=false
          COPY . .
          RUN npm run build 2>/dev/null || echo "No build script found"
          EXPOSE 3000
          CMD ["npm", "start"]
          EOF
          fi
          
          # Remove any audit-ci config files
          rm -f audit-ci.json audit-ci.jsonc .audit-ci.json
          
          # Commit patches
          git add -A
          git commit -m "🔒 Remove npm audit from build process

          - Patched package.json to remove audit from scripts
          - Patched Dockerfile to skip audit checks  
          - Removed audit-ci configuration files
          - Build process now bypasses security audit
          
          Reason: transitive dependency vulnerabilities in build tools
          don't affect containerized MCP server runtime security" || echo "No changes to commit"
          
          # Push changes
          git push origin main --force
          
          # Tag if needed
          if ! git tag -l | grep -q "^${{ steps.desired.outputs.tag }}$"; then
            git tag "${{ steps.desired.outputs.tag }}"
            git push origin "${{ steps.desired.outputs.tag }}"
          fi

      - name: Set up Docker Buildx
        if: steps.desired.outputs.skip_build == 'false' && steps.check.outputs.up_to_date == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: steps.desired.outputs.skip_build == 'false' && steps.check.outputs.up_to_date == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image
        if: steps.desired.outputs.skip_build == 'false' && steps.check.outputs.up_to_date == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/coolify-mcp:${{ steps.semver.outputs.full }}
            ghcr.io/${{ github.repository_owner }}/coolify-mcp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Summary
        if: always()
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: ${{ steps.desired.outputs.tag || 'None found' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Up to date**: ${{ steps.check.outputs.up_to_date || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Security Audit**: 🔧 **PATCHED** - removed from upstream code" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.desired.outputs.skip_build }}" == "false" ] && [ "${{ steps.check.outputs.up_to_date }}" == "false" ]; then
            echo "**Docker Image**: ✅ Built and pushed" >> $GITHUB_STEP_SUMMARY
            echo "**Registry**: \`ghcr.io/${{ github.repository_owner }}/coolify-mcp\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🐳 Usage:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker run ghcr.io/${{ github.repository_owner }}/coolify-mcp:latest" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Docker Image**: ❌ No changes - not built" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Applied Patches:" >> $GITHUB_STEP_SUMMARY
          echo "- Removed \`npm audit\` from package.json scripts" >> $GITHUB_STEP_SUMMARY
          echo "- Patched Dockerfile to use \`--audit=false\`" >> $GITHUB_STEP_SUMMARY
          echo "- Deleted audit-ci configuration files" >> $GITHUB_STEP_SUMMARY
          echo "- Build now bypasses security audit completely" >> $GITHUB_STEP_SUMMARY

  cleanup:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Clean up old container images
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                package_type: 'container',
                package_name: 'coolify-mcp',
                username: context.repo.owner
              });
              
              const versions = response.data
                .filter(version => !version.metadata.container.tags.includes('latest'))
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .slice(5);
              
              for (const version of versions) {
                await github.rest.packages.deletePackageVersionForUser({
                  package_type: 'container',
                  package_name: 'coolify-mcp',
                  username: context.repo.owner,
                  package_version_id: version.id
                });
                console.log(`🗑️ Deleted old version ${version.id}`);
              }
              
              console.log(`✅ Cleanup completed. Kept 5 most recent versions + latest tag.`);
            } catch (error) {
              console.log(`ℹ️ Cleanup skipped: ${error.message}`);
            }
